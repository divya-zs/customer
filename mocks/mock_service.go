// Code generated by MockGen. DO NOT EDIT.
// Source: store/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "customer/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceIn is a mock of ServiceIn interface.
type MockServiceIn struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInMockRecorder
}

// MockServiceInMockRecorder is the mock recorder for MockServiceIn.
type MockServiceInMockRecorder struct {
	mock *MockServiceIn
}

// NewMockServiceIn creates a new mock instance.
func NewMockServiceIn(ctrl *gomock.Controller) *MockServiceIn {
	mock := &MockServiceIn{ctrl: ctrl}
	mock.recorder = &MockServiceInMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceIn) EXPECT() *MockServiceInMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceIn) Create(ctx *gofr.Context, customer models.Customer) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customer)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceInMockRecorder) Create(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceIn)(nil).Create), ctx, customer)
}

// Delete mocks base method.
func (m *MockServiceIn) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceIn)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockServiceIn) Get(ctx *gofr.Context) ([]models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceInMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceIn)(nil).Get), ctx)
}

// GetByID mocks base method.
func (m *MockServiceIn) GetByID(ctx *gofr.Context, id int) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceInMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServiceIn)(nil).GetByID), ctx, id)
}

// Patch mocks base method.
func (m *MockServiceIn) Patch(ctx *gofr.Context, id int, customer models.Customer) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, id, customer)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockServiceInMockRecorder) Patch(ctx, id, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockServiceIn)(nil).Patch), ctx, id, customer)
}

// Update mocks base method.
func (m *MockServiceIn) Update(ctx *gofr.Context, id int, customer models.Customer) (models.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, customer)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceInMockRecorder) Update(ctx, id, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceIn)(nil).Update), ctx, id, customer)
}
